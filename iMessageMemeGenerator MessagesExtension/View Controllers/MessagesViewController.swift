//
//  MessagesViewController.swift
//  iMessageMemeGenerator MessagesExtension
//
//  Created by Derek Buchanan on 8/30/22.
//

import UIKit
import Messages
import MASegmentedControl

class MessagesViewController: MSMessagesAppViewController {
    
    static private(set) public var shared: MessagesViewController!
    static let didTransitionKey: NSNotification.Name = NSNotification.Name(rawValue: "didTransitionKeyMessagesViewController")
    // track if this view is expanding/closing
    var isTransitioning: Bool = false
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var segmentedControl: MASegmentedControl! {
        didSet {
            self.segmentedControl.itemsWithText = true
            self.segmentedControl.fillEqually = true
            self.segmentedControl.roundedControl = true

            self.segmentedControl.setSegmentedWith(items: ["Photos", "Tenor"])
            self.segmentedControl.padding = 2
            self.segmentedControl.textColor = #colorLiteral(red: 0.2549019754, green: 0.2745098174, blue: 0.3019607961, alpha: 1)
            self.segmentedControl.selectedTextColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
            self.segmentedControl.thumbViewColor = #colorLiteral(red: 0, green: 0.4784313725, blue: 1, alpha: 1)
            self.segmentedControl.titlesFont = UIFont(name: "OpenSans-Semibold", size: 14)
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        MessagesViewController.shared = self
    }
    
    @IBAction func segmentedControlDidToggle(_ sender: Any) {
        let scrollWidth = Int(self.scrollView.bounds.size.width)
        let thumbIndex = self.segmentedControl.selectedSegmentIndex
        let destinationRect = CGRect(x: scrollWidth * thumbIndex, y: 0, width: scrollWidth, height: 1)
        self.scrollView.scrollRectToVisible(destinationRect, animated: true)
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
        self.isTransitioning = true
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
        self.isTransitioning = false
        
        NotificationCenter.default.post(name: Self.didTransitionKey, object: nil)
    }

    /// - ComposeMessage
    func composeMessage(with mediaURL: URL, session: MSSession? = nil) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        self.requestPresentationStyle(.compact)
        
        conversation.insertAttachment(mediaURL, withAlternateFilename: nil) { error in
            print("Insert attachment message error: \(String(describing: error))")
        }
    }
}
